了解です。以下に全体の内容を修正したバージョンを示します：

```plaintext
Mar 23
  Web Development
    - Odin Foundation Landing Page Read (1 hour)
      - Read Odin Foundation Landing Page with English translation.
  Version Control (Git)
    - Commit message review (30 minutes)
      - Reviewed commit message guidelines.
    - Understand commit message rules (45 minutes)
      - Learned the rules for writing commit messages.
    - Try to write commit messages following the 7 rules (30 minutes)
      - Practiced writing commit messages following the 7 rules.
    - Understanding -m and -f difference (40 minutes)
      - Learned the difference between -m and -f options in Git.
    - Commit and push the -f ver commit message to Git (30 minutes)
      - Committed and pushed a commit message using the -f option in Git.
    - Understanding when to commit on this project (40 minutes)
      - Learned when to make commits in a project.
    - How to make project (1 hour)
      - Explored how to create a project.
    - How to make memo on project and open (30 minutes)
      - Learned how to make notes on a project and open it.
    - Making memo with outlines (four) in the directory to explain (45 minutes)
      - Created memos with outlines to explain projects in the directory.
    - Understanding why "git init" is needed and its structure (40 minutes)
      - Learned why "git init" is necessary and its structure.

Mar 24
  Web Development
    - Learn Live Server (1 hour)
      - Explored Live Server and its functionalities.
  JavaScript
    - Read and understand const, let, var (45 minutes)
      - Studied const, let, and var variables in JavaScript.
    - Complete JavaScript task (1 hour)
      - Completed JavaScript task assigned.
  Version Control (Git)
    - Create GitHub Repo (30 minutes)
      - Created a new GitHub repository.
  Visual Studio Code (VSCode)
    - Unicode Setting on VSCode (15 minutes)
      - Configured Unicode settings on VSCode.
  Others
    - Resignation Process (3 hours)
      - Worked on resignation process for previous company.

Mar 25
  JavaScript
    - JavaScript Assignment and knowledge check (40 minutes)
      - Completed assignment and knowledge check on JavaScript.
  Version Control (Git)
    - Create GitHub Repo (30 minutes)
      - Created a new GitHub repository.
  Visual Studio Code (VSCode)
    - Unicode Setting on VSCode (15 minutes)
      - Configured Unicode settings on VSCode.
  Others
    - Resignation Process (3 hours)
      - Worked on resignation process for previous company.

Mar 26
  CSS
    - Flex-box Study (1 hour)
      - Studied Flexbox using the Flexbox Zombies resource.
    - Review CSS Variables (45 minutes)
      - Reviewed concepts related to CSS variables.
    - Understand CSS Flexbox (1 hour)
      - Gained understanding of CSS Flexbox.
  Others
    - Resignation Process (3 hours)
      - Worked on resignation process for previous company.

Mar 27
  HTML & CSS
    - HTML & CSS Review (1 hour)
      - Reviewed basic HTML & CSS concepts.
    - Wrap Flexbox (45 minutes)
      - Practiced wrapping Flexbox elements.
    - HTML & CSS 2 Review (45 minutes)
      - Reviewed additional HTML & CSS concepts.
  Others
    - Walking + Training (1 hour)
      - Engaged in walking and training activities.

Mar 28
  JavaScript
    - JavaScript Study (30 minutes)
      - Reviewed const and ${} syntax.
  Git ＆ Markdown Memo
    - Portfolio memo, what's the best way to show learning proof (1 hour 30 minutes)
      - Worked on documenting portfolio progress and explored best methods to showcase learning.
   (##Before edit from here)
	Others 1 hour
		walking and gym
	  
	2hours
	-assignment for Data Types and Conditionals(javascript) with Replit
	

Mar 29
	40 min
	review Data Types and Conditionals(javascript)

	how to study toppest people 10min

	2 hours
	Dev Tool
	1 hour
	javascript/function
	other(1 hour)
	gym/walking
	
Mar 30 
	other 15min
	gym/ walking
	git 30min
	commit message by 7 rules/make and transfer my glossaries memo to git hub
	
	javascript 
	argument, parameter, function / ${}

Mar 31  
	(English only day)
	3hours 
	javascript
	if, boolean ,loops, array, etc
	ruby
	ruby1(progate 14 lessons) , each methods, array
	2 hours half
	Dev Tool
	debug, break point (until step 5 https://developer.chrome.com/docs/devtools/javascript/)
	in English only)



apr 1
  1hour
  error Dev Tool
  1hour
  Problem solving
  1 hour
  Project / how to do, draw map etc
  1 hour
  How to study for engineer 2024/how do top people study to maximize daily time productivity


  apr 2

  1hour
  gym
  1hour
  Problem Solving / how to make best performance daily life and fix

  apr 3
   (Too busy(for learning odin), due to fatigue, I did not have energy to write)
   

  apr 4
   2 hours 
   1 hour half 
   2 hours
   error / document.querySelector()の使い方
   Gym

   Apr5
   DOM
	2hours 

   Apr6(sleepless due to air pollution)
   For,roop, Array(review)
   Object(review) , Arrays in Objects 
   Object{object} , difference of Array and Object access way
   Object key: value , key = primitive only, value → object also ok


 Apr 7 5:30 am 

  	7am
	running 5min
	training few min
	
	1hour
	1hour
	1hour
	mainly Arrow and function

Apr 8   9:30 am woke up
	10:00? Start 
	1 hour
	array/function
	1 hour
	call back - deep understanding

Apr9    4:00 woke up (toothache...) 4hours sleep
	7:00 running 15min run-I found new good habit
	8:00-9:30 callback function
	11:30-13:30? / WEB-client-Server with English
	3:15 running
	3:40?-4:   / WEB-Application, Review and Find How To Learn Effectively
	5:00 - 6:30 
	8:00 - 9:00 Review

Apr 10   
	running 10min
	2 hour Finding Effective Reviewing way with Ai   ←prioritize what you need first on am
	1 hour Reviewing by Memo 
	2 hour Node JS 
	
	[Midnight "Cough" Problem - Air pollution and dusty dovey cover]
 	Until morning, I could not sleep!!
	
Apr 11 ###sleepless , feel fatigue###	
		
	running 10min
	2 hours 
	Github→github message setting. it took 1hour/Rock/scissors paper project/

        2 hours→ rock scissors paper project/ → random, how to make

        2 hours
	

Apr 12  Break
	fatigue , does not have motivation
        → its affecting Apr 10 sleepless one.
	     Apr 11 → under sleepless, you did

	running 10min
	
Apr 13
	9:00-9:30
	checking 02-April and write for past 3 days while analyzing.

	9:30-10:30
	rock scissors paper project/ make New one for only console(html,js,fucntion,git comment)

	12:00-2:00pm
	rock scissors paper project/ 2 foundation logic for game

	@4:00 - 4:40 
	gym(arm and runinng) and cold shower
	
	4:40 - 5:40 or 6:40...

	7:10-8:40 ?
	rock scissors paper project

	around 0:30 over sleep

Apr 14  woke up 10:00 (I feel fatigue) 

	

Apr 15 	2 hours two set plus English 
	how to work as fleerance
	25min 20min walking

Apr 16 Woke up 4:00
 	DOM object meaning in DOM
	1 hour ,
	English

	10:00-11:47
	DOM object , append, querySelector


Apr 20 10:00 - 9:00pm

Apr 21 10:00??-15:00

Apr 22 gym 15min
	
Apr 23 12:00
	1hour
	Practice DOM by dot.install while making code by myown
	#01-07 with AI question till you can write code perfectly.

	14:30 15min
	running

	15:00 1hour 15min
	MyTabMenu 

	18:30 
	20-30min TOEIC all parts

	22:00
	over 1hour half
	Which way should I move next ruby or javascript and python?

Apr 24 
	9:00 woke up 3times wakeup due to cough
 	
	9:30? Gym running 10min new record / wait lift / abdminal

	10:20
	DOM .install
	# 2345 pass
	# 6 or Each ❌
	1hour
        1hour
	1 hour about Randing page project with html and CSS

	21:00 gym while seeing how to hunt job
	40min

	22:00-24:00 searching
Apr 25

	gym 10:00? Runinng and traniing
	search and React
	10:40-12:00 

Apr 26

Apr 27 React 1
Apr 28 React 2

Apr 29	React

	11:15-1:43 2hours half + night time , try to memorize by flash card
	review progate React 1 and 2 (until props)
	child instance and parent and so on... and why do they need it for and what's role..
	so many question one by one


Apr 30  React 
	3times + night time , try to memorize by flash card
	progate
	what's the rendering meaning why need and so on.
	one by one, still I have question and struggle to catch image what's react want to do.

May 1  
	gym walking 10min
	3 times , sleepless due to ichy cough on midnight 1:50-7:00am...
	React 4 
	what's the constructor and why and so on.
	Midnight memorize by flash card js,css, html each of over 15

May 2   
	11:00 start
	gym walking + 8.3speed and 1  5min + training / best condition patern
	
	React Noticed! React has <App /> Hierarchical structure and call like a staircase
	
	Review Function
	gym walking + lift up double 10kg 10 3set , 5kg 10 3set with diffrent postion

 
May 5 React (noticed js,return,jsx - function or {key:値} pattern)


	



May 10	



May 11 JS function, Method, class/instance -- Review
	React Progate 1, 2 , 3 （All by Class component）
	(Understand and notice , I need to learn and pile up basics to do React)


May 12	Running 10min
	React progate 2, 3, 4 （All by Class component）
	JS function, Method, class/instance -- Review
	Progate4(input.value.target)
	

May 13 JS function,  class/instance Review

May 14 (Forgot what I did)
 

May 15 React  
		Try to make until end  , dot install (first time only)

May 16 React To do list half
		useState(hook)- learn first time function style component
		Training 

May 17 fetch Ai
		React Try to make it as one by one parts
		and study for to May 16 to do list which I was not sure 
		(parent and child component role difference)
		(conditional rendering)-(basic conditional !,&&,? :)

May 18 
May 19 Node.JS -Odin Project- Introduction
	   React - React Official site
	   Search for only React or including BackEndBasics to portpholio

May 20 --- immigration day

May 21 Node.JS - Progate 1  	
	   SQL- Progate 1 ,SQL IV
	   Making Plan

May 22 Node.JS - Progate 2, 3
	   SQL- Progate 
	   Making Plan

May 23 Node.JS - Progate 4, 5(on going) 
	   HTML CSS - Progate 8 lesson
	   Making Plan

May 24
	   strong fatigue and headeache 

May 25 Node.JS Memo
	   React - Odin Project [3] + JS lesson 
	   Setting Vite, React, Dev Tool and understanding 

May 26 

May 27 React - Odin Project [2,4,5]
	   				main.jsx and app.jsx difference 
	   				framework and library difference 
	   				default and name export
	   				[4]Fix Error
　　　  React - Official [JavaScript in JSX with Curly Braces]
       React - Official [Writing Markup with JSX]
               
			 Understanding "Destructuring assignment" （3hours or more）

May 28 React  - Official [Passing Props to a Component] (2hours)
					understanding "Destructuring assignment"
						-Why can an <img /> tag alone render an image?
						-How is the expression src={getImageUrl(person)} evaluated and valid?
						-How can the getImageUrl function, imported from a separate file, be referenced within the Avatar component?
						-How can the person object, defined within the Profile component, be referenced within the Avatar component?
						-What is the role of the default value 's' for the second argument size in the getImageUrl function?
						-How does setting a default value serve as a safeguard when an optional property is not provided?

						Compare with last day "Destructuring assignment"

May 29 React  - Official [Passing Props to a Component]
					Review
					Spread syntax 
					Children
					Search English Voca in React
	   React  - Official [Conditional Rendering]		
	   				else return
					understanding why you use if,?:,&&
					<>()<>
					Challenges 1,2,3 (Need Retry again)
	   React  - Official [Rendering Lists]	
	   				 All...
					 Challenges 1,2,3,4 (Need Retry again) 
					 *React Official Answers were wrong.
	   Planning - Study and Portfolio		

May 30  React - Odin Project [7]
					Keys in React
					uuid , increment id
					understanding good and bad Key
		
	    React - Odin Project [8] - [Passing Data Between Components]
					props - Default Setting review
					props - function
					*want to review again these parts
		
		React - Odin Project [9] - [Introduction To State]
					Read
					decipher BackGround Switch Component

May 30  React - Odin Project [9] - [Introduction To State]
					Read
					decipher BackGround Switch Component

		React  - Official [State: A Component's Memory]
					Understanding to retain Data by hooks
					Understanding flow of React Code
					return 0 can be index[0]
					disable property
					next and prev error
					position of hooks
					index and state 
					review set and state are function
					import { useState } from 'react'; to use
				
					challenge [1,2,3,] 	
					- decipher each Components Error
					[1]gallery
					[2]form inputs
					[3]submit message
					[4]Remove unnecessary state 

		React  - Official [Render and Commit]
				

Jun 1
Jun 2
Jun 3  Travel Totally Refresh
Jun 4  Coming back
Jun 5  Light Review 

Jun 6   React     Review 
					Describing the UI　- ALL
						Understanding Your UI as a Tree
						Conditional Rendering
					Adding Interactivity 
						Responding to Events 
						⇨(Until "Event propagation" )


				  custom button
				  children
				  Understanding <> and {} difference in JSX
				  Understanding <Button><Button/> - parents and child

		React - Odin Project [10] - [More On State]
		React  - Official [State as a Snapshot]		　
		React  - Official [Choosing the State Structure]
					- Group related state
					-
		
Jun 7	Gym   	  ✔️ Condition

	    React     Review
					Describing the UI　[second time]
					✔️	1. First React component 
					✔️	2. Creating multi-component files 
					✔️	3. Adding markup with JSX {profile}
					✔️	4. Using JavaScript in JSX
					✔️  5. Configuring components with props {to do list}
						 - ✔️✔️✔️ Understanding { children }  (1hour)
					✔️	6. Conditional rendering of components
					✔️	7. Rendering multiple components
						 - key
						8. Writing pure components
						9. Understanding UI as a tree

		Gym   	  ✔️ Condition

	    React     Review
					Adding Interactivity　[second time]
					✔️	1. Handling events
						 - ✔️ Understanding { children } ⇨ Use codesanbox with Claude sample image to figure out
					✔️ 	2. Using state to remember {image gallery}
					✔️ 	　- ✔️ Understanding "index < element.length -1" 
						     Try to make original "children"
						3. UI update phases
					✔️	4. State update delay {form}
					✔️	5. Queueing state updates
						 - ✔️ "setScore(s => s + 1)"
						6. Updating state objects　- Not yet in Odin project
						7. Updating state arrays   -  Not yet in Odin project

				  Try React by VS code

		React  - Official [Choosing the State Structure]		　
					✔️✔️✔️  State Consolidation {pont event}
						 - ✔️✔️✔️ CSS(onPointerMove, client ,e.pageX,position-absolute-relative,transform,vw,vh)
						 
						Contradiction Prevention
						Compute, Don't Store
						DRY State
						Flat Over Nested				  


Jun 8	
		Food	  ✔️ Condition
		Gym   	  ✔️ Condition
		Sup		  ✔️ Condition

	    React     Review
					Describing the UI　[second time]
					✔️	1. First React component 
					✔️	2. Creating multi-component files 
					✔️	3. Adding markup with JSX {profile}
						- (new!) always 2 ways for component - Data and function
					✔️	4. Using JavaScript in JSX
					✔️  5. Configuring components with props {to do list}
						 - ✔️✔️✔️ Understanding { children }  (1hour)
						6. Conditional rendering of components
						7. Rendering multiple components
						 - (new!) You can import and use functions from separate files just as if they were written in the same file.
						8. Writing pure components
						9. Understanding UI as a tree
	
	    React     Review
					Adding Interactivity　[second time]
					✔️	1. Handling events
						　- (new!) is inline style better ? ⇨ NO！
					✔️	2. Using state to remember {image gallery}
						  - (new!) change = 2 ways - state and Conditional　⇨ combine = switch on off
						3. UI update phases

			Food      ✔️ Condition (Before Study)
			Gym   	  ✔️ Condition

					✔️	4. State update delay {submit form}
						-(new!)handleSubmit on the form 
					✔️	5. Queueing state updates
	
						6. Updating state objects　- Not yet in Odin project
						7. Updating state arrays   -  Not yet in Odin project

		React  - Official [Choosing the State Structure]		　
					✔️	1.State Consolidation {pointer}
						 - ✔️ transform: translate(),position: relative absolute
					✔️✔️  2-1.Contradiction Prevention (two codes)
						{loading with Async}
						 - ✔️✔️ sync, await , Promise , resolve

			Food      ✔️ Condition (Before Study)
			Gym   	  ✔️ Condition

					✔️✔️ 2-2.Contradiction Prevention (two codes)
						{loading with Async}
						 - ✔️ (!)true,false ⇨ variable = same ,but just only one code ! ⇨ avoid confusion or mistakes

					✔️	3.Avoid redundant state {form label}
					✔️　4−1.DRY State(Avoid duplication in state) (three codes)

			Food      ✔️ Condition (Before Study) (4times)
			Gym   	  ✔️ Condition (4times)

					✔️✔️　4−2.DRY State(Avoid duplication in state) (three codes){select bar ＆ spread}
						- ✔️ if (item.id === id)
						- ✔️ { ...item, title: e.target.value }
						- ✔️ map ⇨ else {return item;}
					　  4−3.DRY State(Avoid duplication in state) (three codes){select bar ＆ spread}	
						5.Flat Over Nested				  

	Result 
	Total Component 15
	      Gym        4 
	What I was not sure but You could figure out today?
		- (new!) always 2 ways for component - Data and function
		- (new!) You can import and use functions from separate files just as if they were written in the same file.　It means, how you call ways are also same. ⇨ {} 
		- (new!) is inline style better ? ⇨ NO！
		- (new!) change = 2 ways - state and Conditional　⇨ combine = switch on off




		Jun 9	
		Food	  ✔️ Condition
		Gym   	  ✔️ Condition
		Sup		  ✔️ Condition

	    React     Review
					Describing the UI　[second time]
					✔️	1. First React component 
					✔️	2. Creating multi-component files 
					✔️	3. Adding markup with JSX {profile}
					✔️	4. Using JavaScript in JSX
					✔️  5. Configuring components with props {to do list}
					✔️	6. Conditional rendering of components
					✔️	7. Rendering multiple components
	
						8. Writing pure components
						9. Understanding UI as a tree
	
	    React     Review
					Adding Interactivity　[second time]
					✔️	1. Handling events
					✔️	2. Using state to remember {image gallery}
						3. UI update phases
					✔️	4. State update delay {submit form-drop list}
						- ✔️ onChange={e => setTo(e.target.value)}>
						- ✔️S elect
					✔️	5. Queueing state updates
	
						6. Updating state objects　- Not yet in Odin project
						7. Updating state arrays   -  Not yet in Odin project

		React  - Official [Choosing the State Structure]		　
					✔️ 	1.State Consolidation {pointer}
						 - ✔️ transform: translate(),position: relative absolute
					✔️	 2-1.Contradiction Prevention (two codes)
						 	{Textarea ,loading with Async}
						 - ✔️ if (isSent) { return <h1>Thanks for feedback!</h1> }⇨ if not, nothing return ⇨
						it means nothing is displayed 


			Food      ✔️ Condition (Before Study)
			Gym   	  ✔️ Condition

					✔️ 2-2.Contradiction Prevention (two codes)
						{loading with Async}
						 - ✔️ (!)true,false ⇨ variable = same ,but just only one code ! ⇨ avoid confusion or mistakes

					✔️	3.Avoid redundant state {form label}
					✔️ 　4−1.DRY State(Avoid duplication in state) (three codes)
					 	- (!) two ways to duplicate ⇨
						< /> or map & const List ⇨ times call

					 　4−2.DRY State(Avoid duplication in state) (three codes){select bar ＆ spread}
						- ✔️ if (item.id === id)
						- ✔️ { ...item, title: e.target.value }
						- ✔️ map ⇨ else {return item;}


		Jun 10	
		Food	  ✔️ Condition
		Gym   	    Condition ⇨ close
		Sup		  ✔️ Condition
		Sleep	  ✔️ Condition

	    React     Review
					Describing the UI　[second time]
					✔️	1. First React component 
					✔️	2. Creating multi-component files 
					✔️	3. Adding markup with JSX {profile}
					✔️	4. Using JavaScript in JSX
					   5. Passing props to a component {basic To do}
						 - (!)Understanding Data Flow in React:
						  As long as Parent data, you can pass Props down to other every children.
					✔️	6. Conditional rendering of components
					✔️	7. Rendering multiple components
	
						8. Writing pure components
						9. Understanding UI as a tree

	    React     Review
					Adding Interactivity　[4 times?]
					✔️✔️	1. Handling events　{Child} 
							- ✔️✔️(!)
								Allowable changes (passed as props or children):
								- Text or content
								- Specific event handlers
								- State-dependent attributes (disabled, active, etc.)

		Food	    Condition ⇨ only breed ⇨ cant no concentrate and memory is not good.
		Gym   	  ✔️ Condition 

				    ✔️	2. Using state to remember {image gallery}
							- review index[x]
				    ✔️	3. UI update phases
					✔️	4. State update delay {submit form-drop list}
					✔️	5. Queueing state updates
	
						6. Updating state objects　- Not yet in Odin project
						7. Updating state arrays   -  Not yet in Odin project

		React  - Official [Choosing the State Structure]		　
					 	1.State Consolidation {pointer}
						 - { x: 0, y: 0 } ⇨ { key1: value1, key2: value2 }
						 - ✔️ transform: translate(),position: relative absolute
	
			Food      ✔️ Condition (Before Study)
			Gym   	  　 Condition
			Sup

						 2-1.Contradiction Prevention (two codes)
						 	{Textarea ,loading with Async}
						 - ✔️ if (isSent) { return <h1>Thanks for feedback!</h1> }⇨ if not, nothing return ⇨
						it means nothing is displayed 




					 2-2.Contradiction Prevention (two codes)
						{loading with Async}
						 - ✔️ (!)true,false ⇨ variable = same ,but just only one code ! ⇨ avoid confusion or mistakes

						3.Avoid redundant state {form label}
					 　4−1.DRY State(Avoid duplication in state) (three codes)
					 	- (!) two ways to duplicate ⇨
						< /> or map & const List ⇨ times call

					 　4−2.DRY State(Avoid duplication in state) (three codes){select bar ＆ spread}
						-  if (item.id === id)
						-  { ...item, title: e.target.value }
						-  map ⇨ else {return item;}

					✔️✔️✔️   5-1 Avoid deeply nested state {Object and List combination - "Recursive Object Structure" }
					   	- ✔️ review object and list　- Differences in Usage
						⇨ [{ name: "りんご" }, { name: "バナナ" }] 
						⇨ { 場所: "公園", 食べ物: ["おにぎり", "サンドイッチ"] }
						- **To group similar items:** Use a list of objects.
						- **To gather various pieces of information about one large item:** Use an object with lists inside.
						- map ⇨ ⭕️ list, ❌ 
						- "Recursive Object Structure" - list and object

			Food      ✔️ Condition (Before Study)
			Gym   	  　 Condition

						5-1 Avoid deeply nested state {Object and List combination - "Recursive Object and function Structure" }
						 - object list ⇨ variable.key.map
						 - ✔️✔️✔️ recursive function
						 - key.length > 0 && ⇨ if there is element, display jsx
						 - understanding list id and ol confusion, + unnecessary id on list